/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pay;

import java.awt.event.ActionEvent;
import java.math.BigDecimal;
import javax.swing.JOptionPane;

/**
 *
 * @author David Maupin
 */
import java.math.RoundingMode;

public class PayFrame extends javax.swing.JFrame {
    private final double[] leadAmt = new double[14];
    private double[] leadHrs = new double[14];
    private boolean is7th1;
    private boolean is7th2;
    
    private static final Double[] hour = new Double[14];
    private static Double wage;
    private static Double tax;
    private static Double tax1 = 0.0;
    private static Double tax2 = 0.0;
    private static Double taxD;
    private static Double ins;
    //private static Double union;
    private static Double union1 = 0.0;
    private static Double union2 = 0.0;
    private static Double unionD;
    private static Double k401;
    private static Double k1 = 0.0;
    private static Double k2 = 0.0;
    private static Double D401k;
    private static Double tHour;
    private static Double tGross;
    private static Double tNet = 0.0;       
    private static Double net1 = 0.0;
    private static Double net2 = 0.0;
    private static double totalD;
    
    private static Double gross1;
    private static Double gross2;
    
    private static Double week1;
    private static Double week2;
    private static Double otherHr1;
    private static Double otherHr2;
    
    private static Double oThour1 = 0.0;
    private static Double oThour2 = 0.0;
    // private static Double oTweek2 = 0.0; // Removed unused variable
    private static Double spltDay1 = null;
    private static Double spltDay2 = null;
    private static Double spltHour1 = 0.0;
    private static Double spltHour2 = 0.0;
    private static boolean oT1;
    private static boolean oT2;
    
    private static final boolean[] b7th = new boolean[14];
    // private static boolean is7th2; // Removed unused variable
    private static Double hour7th1 = 0.0;
    private static Double hour7th2 = 0.0;
    private static boolean chk7th;
    private static int day1;
    private static int day2;
    
    private static final boolean[] hol = new boolean[14];
    private static final int[] isHol = new int[14];
    private static Double holHour1 = 0.0;
    private static Double holHour2 = 0.0;
    private static boolean holChk;
    private static final Double []holHour = new Double [14];
    
    private static final boolean[]lead = new boolean [14];
    private static final String[]leadAmtS = new String [14];
    // Removed unused array leadAmt
    private static final String[]leadHrsS = new String[14];
    // Removed unused array leadHrs
    // private static Double leadHour1 = 0.0; // Removed unused variable
    private static boolean leadChk;   
    
    // Removed unused field num
    private static int num1 = 0;
    private static int num2 = 0;

    /**
     * Creates new form NewJFrame
     */
    public PayFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        fOtHours0 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        fOtHours1 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        fTax = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        fIns = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        fDay0 = new javax.swing.JTextField();
        fDay1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ok = new javax.swing.JButton();
        fDay2 = new javax.swing.JTextField();
        fHours0 = new javax.swing.JTextField();
        fHours1 = new javax.swing.JTextField();
        f7th0 = new javax.swing.JCheckBox();
        fLead0 = new javax.swing.JCheckBox();
        fHol0 = new javax.swing.JCheckBox();
        fWage = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        fDay3 = new javax.swing.JTextField();
        fDay4 = new javax.swing.JTextField();
        fDay5 = new javax.swing.JTextField();
        fDay6 = new javax.swing.JTextField();
        fDay7 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel18 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        fDay8 = new javax.swing.JTextField();
        fDay9 = new javax.swing.JTextField();
        fDay10 = new javax.swing.JTextField();
        fDay11 = new javax.swing.JTextField();
        fLead7 = new javax.swing.JCheckBox();
        fDay12 = new javax.swing.JTextField();
        f7th1 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        fLead1 = new javax.swing.JCheckBox();
        fHol1 = new javax.swing.JCheckBox();
        f7th2 = new javax.swing.JCheckBox();
        fLead2 = new javax.swing.JCheckBox();
        fHol2 = new javax.swing.JCheckBox();
        f7th3 = new javax.swing.JCheckBox();
        fHol7 = new javax.swing.JCheckBox();
        fLead3 = new javax.swing.JCheckBox();
        fDay13 = new javax.swing.JTextField();
        fHol3 = new javax.swing.JCheckBox();
        f7th8 = new javax.swing.JCheckBox();
        fLead8 = new javax.swing.JCheckBox();
        fHol8 = new javax.swing.JCheckBox();
        f7th9 = new javax.swing.JCheckBox();
        fLead9 = new javax.swing.JCheckBox();
        fHol9 = new javax.swing.JCheckBox();
        f7th10 = new javax.swing.JCheckBox();
        fLead10 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        fHol10 = new javax.swing.JCheckBox();
        f7th4 = new javax.swing.JCheckBox();
        f7th11 = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        fLead11 = new javax.swing.JCheckBox();
        fHol11 = new javax.swing.JCheckBox();
        f7th12 = new javax.swing.JCheckBox();
        fLead12 = new javax.swing.JCheckBox();
        fHol12 = new javax.swing.JCheckBox();
        f7th13 = new javax.swing.JCheckBox();
        fLead13 = new javax.swing.JCheckBox();
        fHol13 = new javax.swing.JCheckBox();
        fLead4 = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        fHol4 = new javax.swing.JCheckBox();
        f7th5 = new javax.swing.JCheckBox();
        fLead5 = new javax.swing.JCheckBox();
        fHol5 = new javax.swing.JCheckBox();
        f7th6 = new javax.swing.JCheckBox();
        fLead6 = new javax.swing.JCheckBox();
        fTNet = new javax.swing.JTextField();
        fHol6 = new javax.swing.JCheckBox();
        fTGross = new javax.swing.JTextField();
        f7th7 = new javax.swing.JCheckBox();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        fGross1 = new javax.swing.JTextField();
        fTHours = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        fGross0 = new javax.swing.JTextField();
        fNet0 = new javax.swing.JTextField();
        fNet1 = new javax.swing.JTextField();
        f401K = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        label1 = new java.awt.Label();
        jLabel42 = new javax.swing.JLabel();
        fTaxD = new javax.swing.JTextField();
        fUnionD = new javax.swing.JTextField();
        f401kD = new javax.swing.JTextField();
        fTotalD = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        fChkUn = new javax.swing.JCheckBox();
        jLabel47 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fOtHours0.setRequestFocusEnabled(false);

        jLabel40.setText("Other Hours");

        fOtHours1.setRequestFocusEnabled(false);

        jLabel41.setText("Other Hours");

        fTax.addActionListener(evt -> fTaxActionPerformed(evt));

        jLabel23.setText("Tax Rate %");

        fIns.addActionListener(evt -> fInsActionPerformed(evt));

        jLabel24.setText("Insurance $");

        jLabel27.setText("Union Member");

        fDay0.addActionListener(evt -> fDay0ActionPerformed(evt));

        fDay1.addActionListener(evt -> fDay1ActionPerformed(evt));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("NSG Shelbyville Pay Calculator");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        cancel.setText("Cancel");
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelMouseClicked(evt);
            }
        });

        jLabel2.setText("Hours");

        ok.setText("OK");
        ok.addActionListener(evt -> okMouseClicked(evt));

        fDay2.addActionListener(evt -> fDay2ActionPerformed(evt));

        fHours0.setRequestFocusEnabled(false);

        fHours1.setRequestFocusEnabled(false);

        f7th0.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th0.addActionListener(evt -> f7th0ActionPerformed(evt));

        fLead0.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead0.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead0MouseClicked(evt);
            }
        });
        fLead0.addActionListener(evt -> fLead0ActionPerformed(evt));

        fHol0.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol0.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol0MouseClicked(evt);
            }
        });
        fHol0.addActionListener(evt -> fHol0ActionPerformed(evt));

        fWage.addActionListener(evt -> fWageActionPerformed(evt));

        jLabel1.setText("Hourly Wage $");

        fDay3.addActionListener(evt -> fDay3ActionPerformed(evt));

        fDay4.addActionListener(evt -> fDay4ActionPerformed(evt));

        fDay5.addActionListener(evt -> fDay5ActionPerformed(evt));

        fDay6.addActionListener(evt -> fDay6ActionPerformed(evt));

        fDay7.addActionListener(evt -> fDay7ActionPerformed(evt));

        jLabel12.setText("Total Hours");

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Week 1");

        jLabel3.setText("Sun");

        jLabel17.setText("Thur");

        jLabel18.setText("Fri");

        jLabel4.setText("Mon");

        jLabel19.setText("Sat");

        jLabel20.setText("Hours");

        fDay8.addActionListener(evt -> fDay8ActionPerformed(evt));

        fDay9.addActionListener(evt -> fDay9ActionPerformed(evt));

        fDay10.addActionListener(evt -> fDay10ActionPerformed(evt));

        fDay11.addActionListener(evt -> fDay11ActionPerformed(evt));

        fLead7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead7.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead7MouseClicked(evt);
            }
        });
        fLead7.addActionListener(evt -> fLead7ActionPerformed(evt));

        fDay12.addActionListener(evt -> fDay12ActionPerformed(evt));

        f7th1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th1.addActionListener(evt -> f7th1ActionPerformed(evt));

        jLabel5.setText("Tue");

        fLead1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead1MouseClicked(evt);
            }
        });
        fLead1.addActionListener(evt -> fLead1ActionPerformed(evt));

        fHol1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol1MouseClicked(evt);
            }
        });
        fHol1.addActionListener(evt -> fHol1ActionPerformed(evt));

        f7th2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th2.addActionListener(evt -> f7th2ActionPerformed(evt));

        fLead2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead2.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead2MouseClicked(evt);
            }
        });
        fLead2.addActionListener(evt -> fLead2ActionPerformed(evt));

        fHol2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol2.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol2MouseClicked(evt);
            }
        });
        fHol2.addActionListener(evt -> fHol2ActionPerformed(evt));

        f7th3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th3.addActionListener(evt -> f7th3ActionPerformed(evt));

        fHol7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol7.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol7MouseClicked(evt);
            }
        });
        fHol7.addActionListener(evt -> fHol7ActionPerformed(evt));

        fLead3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead3.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead3MouseClicked(evt);
            }
        });
        fLead3.addActionListener(evt -> fLead3ActionPerformed(evt));

        fDay13.addActionListener(evt -> fDay13ActionPerformed(evt));

        fHol3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol3.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol3MouseClicked(evt);
            }
        });
        fHol3.addActionListener(evt -> fHol3ActionPerformed(evt));

        f7th8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th8.addActionListener(evt -> f7th8ActionPerformed(evt));

        fLead8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead8.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead8MouseClicked(evt);
            }
        });
        fLead8.addActionListener(evt -> fLead8ActionPerformed(evt));

        fHol8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol8.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol8MouseClicked(evt);
            }
        });
        fHol8.addActionListener(evt -> fHol8ActionPerformed(evt));

        f7th9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th9.addActionListener(evt -> f7th9ActionPerformed(evt));

        fLead9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead9.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead9MouseClicked(evt);
            }
        });
        fLead9.addActionListener(evt -> fLead9ActionPerformed(evt));

        fHol9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol9.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol9MouseClicked(evt);
            }
        });
        fHol9.addActionListener(evt -> fHol9ActionPerformed(evt));

        f7th10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th10.addActionListener(evt -> f7th10ActionPerformed(evt));

        fLead10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead10.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead10MouseClicked(evt);
            }
        });
        fLead10.addActionListener(evt -> fLead10ActionPerformed(evt));

        jLabel6.setText("Wed");

        jLabel7.setText("Thur");

        jLabel9.setText("Fri");

        jLabel10.setText("Sat");

        jLabel13.setText("Hours Worked");

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Week 2");

        jLabel11.setText("Sun");

        jLabel14.setText("Mon");

        fHol10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol10.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol10MouseClicked(evt);
            }
        });
        fHol10.addActionListener(evt -> fHol10ActionPerformed(evt));

        f7th4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th4.addActionListener(evt -> f7th4ActionPerformed(evt));

        f7th11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th11.addActionListener(evt -> f7th11ActionPerformed(evt));

        jLabel15.setText("Tue");

        fLead11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead11.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead11MouseClicked(evt);
            }
        });
        fLead11.addActionListener(evt -> fLead11ActionPerformed(evt));

        fHol11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol11.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol11MouseClicked(evt);
            }
        });
        fHol11.addActionListener(evt -> fHol11ActionPerformed(evt));

        f7th12.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th12.addActionListener(evt -> f7th12ActionPerformed(evt));

        fLead12.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead12.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead12MouseClicked(evt);
            }
        });
        fLead12.addActionListener(evt -> fLead12ActionPerformed(evt));

        fHol12.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol12.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol12MouseClicked(evt);
            }
        });
        fHol12.addActionListener(evt -> fHol12ActionPerformed(evt));

        f7th13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th13.addActionListener(evt -> f7th13ActionPerformed(evt));

        fLead13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead13.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead13MouseClicked(evt);
            }
        });
        fLead13.addActionListener(evt -> fLead13ActionPerformed(evt));

        fHol13.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol13.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol13MouseClicked(evt);
            }
        });
        fHol13.addActionListener(evt -> fHol13ActionPerformed(evt));

        fLead4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead4.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead4MouseClicked(evt);
            }
        });
        fLead4.addActionListener(evt -> fLead4ActionPerformed(evt));

        jLabel16.setText("Wed");

        fHol4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol4.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol4MouseClicked(evt);
            }
        });
        fHol4.addActionListener(evt -> fHol4ActionPerformed(evt));

        f7th5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th5.addActionListener(evt -> f7th5ActionPerformed(evt));

        fLead5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead5.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead5MouseClicked(evt);
            }
        });
        fLead5.addActionListener(evt -> fLead5ActionPerformed(evt));

        fHol5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol5.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol5MouseClicked(evt);
            }
        });
        fHol5.addActionListener(evt -> fHol5ActionPerformed(evt));

        f7th6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th6.addActionListener(evt -> f7th6ActionPerformed(evt));

        fLead6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fLead6.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fLead6MouseClicked(evt);
            }
        });
        fLead6.addActionListener(evt -> fLead6ActionPerformed(evt));

        fTNet.setFocusable(false);
        fTNet.addActionListener(evt -> fTNetActionPerformed(evt));

        fHol6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fHol6.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fHol6MouseClicked(evt);
            }
        });
        fHol6.addActionListener(evt -> fHol6ActionPerformed(evt));

        fTGross.setFocusable(false);
        fTGross.addActionListener(evt -> fTGrossActionPerformed(evt));

        f7th7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        f7th7.addActionListener(evt -> f7th7ActionPerformed(evt));

        jLabel33.setText("Holiday");

        jLabel34.setText("Upgrade");

        jLabel35.setText("7th Day");

        jLabel36.setText("Holiday");

        jLabel37.setText("Upgrade");

        jLabel38.setText("7th Day");

        jLabel29.setText("Hours Worked");

        jLabel30.setText("Total Net");

        jLabel21.setText("Gross");

        jLabel22.setText("Total Gross");

        fGross1.setFocusable(false);
        fGross1.addActionListener(evt -> fGross1ActionPerformed(evt));

        fTHours.setFocusable(false);
        fTHours.addActionListener(evt -> fTHoursActionPerformed(evt));

        jLabel31.setText("Gross");

        jLabel32.setText("Net");

        jLabel39.setText("Net");

        fGross0.setFocusable(false);
        fGross0.addActionListener(evt -> fGross0ActionPerformed(evt));

        fNet0.setFocusable(false);
        fNet0.addActionListener(evt -> fNet0ActionPerformed(evt));

        fNet1.setFocusable(false);
        fNet1.addActionListener(evt -> fNet1ActionPerformed(evt));

        f401K.addActionListener(evt -> f401KActionPerformed(evt));

        jLabel28.setText("401 K %");

        label1.setText("(% Example:  .50 = 50%)");

        jLabel42.setText("Tax ");

        fTaxD.setFocusable(false);
        fTaxD.addActionListener(evt -> fTaxDActionPerformed(evt));

        fUnionD.setFocusable(false);
        fUnionD.addActionListener(evt -> fUnionDActionPerformed(evt));

        f401kD.setFocusable(false);
        f401kD.addActionListener(evt -> f401kDActionPerformed(evt));

        fTotalD.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        fTotalD.setFocusable(false);
        fTotalD.addActionListener(evt -> fTotalDActionPerformed(evt));

        jLabel45.setText("    Union Dues");

        jLabel46.setText("    401 K");

        fChkUn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fChkUn.addActionListener(evt -> fChkUnActionPerformed(evt));

        jLabel47.setText("Total Deductions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(fDay7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(fDay8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(fDay9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fDay10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fDay11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fDay12, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(fDay13, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(312, 312, 312)
                                .addComponent(ok)
                                .addGap(13, 13, 13)
                                .addComponent(cancel)))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fHours1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(fOtHours1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fGross1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39)
                            .addComponent(fNet1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fDay0, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fDay1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fDay2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fDay3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fDay4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fDay5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(fDay6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel35)
                                            .addComponent(jLabel34)
                                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fLead0)
                                            .addComponent(fHol0)
                                            .addComponent(f7th0))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(f7th1)
                                            .addComponent(fLead1)
                                            .addComponent(fHol1))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(f7th2)
                                            .addComponent(fLead2)
                                            .addComponent(fHol2))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(f7th3)
                                            .addComponent(fLead3)
                                            .addComponent(fHol3))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fLead4)
                                            .addComponent(f7th4)
                                            .addComponent(fHol4))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(f7th5)
                                            .addComponent(fHol5)
                                            .addComponent(fLead5))
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(f7th6)
                                            .addComponent(fLead6)
                                            .addComponent(fHol6))))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fHours0, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel29))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fGross0, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel31))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel32)
                                            .addComponent(fNet0, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel40)
                                    .addComponent(fOtHours0, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel38)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fLead7)
                                    .addComponent(f7th7)
                                    .addComponent(fHol7))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(f7th8)
                                    .addComponent(fLead8)
                                    .addComponent(fHol8))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(f7th9)
                                    .addComponent(fLead9)
                                    .addComponent(fHol9))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fLead10)
                                    .addComponent(f7th10)
                                    .addComponent(fHol10))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(f7th11)
                                    .addComponent(fLead11)
                                    .addComponent(fHol11))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fLead12)
                                    .addComponent(fHol12)
                                    .addComponent(f7th12))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fLead13)
                                    .addComponent(f7th13)
                                    .addComponent(fHol13))
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fTHours, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(fTGross, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(fTNet, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel30))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fWage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fTaxD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fTax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fUnionD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fChkUn)
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(f401kD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel47))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(f401K, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fIns, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(fTotalD))))))
                .addGap(9, 26, Short.MAX_VALUE))
            .addComponent(jSeparator5)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(3, 3, 3)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(fWage)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fTax)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28)
                            .addComponent(f401K, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fIns))
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fChkUn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(fTaxD)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fUnionD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(f401kD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fTotalD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel29)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fDay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fDay0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fDay2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fHours0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fGross0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fNet0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel35)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel33)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel34))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(f7th1)
                                        .addGap(19, 19, 19)
                                        .addComponent(fLead1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(fHol1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(f7th2)
                                        .addGap(19, 19, 19)
                                        .addComponent(fLead2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(fHol2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(f7th3)
                                        .addGap(19, 19, 19)
                                        .addComponent(fLead3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(fHol3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(fLead4))
                                    .addComponent(f7th4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(fHol4))
                                    .addComponent(f7th5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(fHol5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(fLead5))
                                    .addComponent(f7th6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(fHol6))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel40)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fOtHours0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(fLead6)))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(fLead0))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol0))
                            .addComponent(f7th0))
                        .addGap(7, 7, 7)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel16)
                                .addComponent(jLabel17)
                                .addComponent(jLabel18)
                                .addComponent(jLabel19))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel13)
                                .addComponent(jLabel21)
                                .addComponent(jLabel39)))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(fDay7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fDay13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fHours1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fGross1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fNet1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel36)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel37))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(fLead7))
                            .addComponent(f7th7)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(f7th8)
                                .addGap(19, 19, 19)
                                .addComponent(fLead8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(f7th9)
                                .addGap(19, 19, 19)
                                .addComponent(fLead9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(fLead10))
                            .addComponent(f7th10)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(f7th11)
                                .addGap(19, 19, 19)
                                .addComponent(fLead11))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol11))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(fLead12))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol12))
                            .addComponent(f7th12)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(fLead13))
                            .addComponent(f7th13)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(fHol13)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ok)
                            .addComponent(cancel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fOtHours1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(jLabel12)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fTGross, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fTHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fTNet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        label1.getAccessibleContext().setAccessibleName(".50 = 50%");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fTaxActionPerformed

    private void fInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fInsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fInsActionPerformed

    private void fDay0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay0ActionPerformed

    }//GEN-LAST:event_fDay0ActionPerformed

    private void fDay1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay1ActionPerformed

    }//GEN-LAST:event_fDay1ActionPerformed

    private void cancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_cancelMouseClicked

    private void okMouseClicked(ActionEvent evt) {//GEN-FIRST:event_okMouseClicked
        get();
    }//GEN-LAST:event_okMouseClicked

    private void fDay2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay2ActionPerformed

    private void f7th0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th0ActionPerformed

    private void fLead0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead0MouseClicked
        if(fLead0.isSelected()){
            leadAmtS[0] = JOptionPane.showInputDialog(null, "Enter the Upgrade amount that will be added to your pay:", "", 1);
            if(leadAmtS[0] == null){
                fLead0.doClick();
                return;
            }
            try{
                leadAmt[0] = Double.parseDouble(leadAmtS[0]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead0.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "Leave the next "
                    + "box blank if you're Upgrade was for the whole day!" + '\n' + "The "
                    + "The Hours box should reflect the entire days hours either way.");
            leadHrsS[0] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[0] == null){
                fLead0.doClick();
                return;
            }
            if(leadHrsS[0].isEmpty()){
                leadHrsS[0] = "0";
            }
            try{
                leadHrs[0] = Double.parseDouble(leadHrsS[0]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead0.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead0MouseClicked

    private void fLead0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead0ActionPerformed

    private void fHol0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol0MouseClicked
        if(fHol0.isSelected()){
            isHol[0] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol0MouseClicked

    private void fHol0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol0ActionPerformed

    private void fWageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fWageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fWageActionPerformed

    private void fDay3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay3ActionPerformed

    private void fDay4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay4ActionPerformed

    private void fDay5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay5ActionPerformed

    private void fDay6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay6ActionPerformed

    private void fDay7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay7ActionPerformed

    private void fDay8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay8ActionPerformed

    private void fDay9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay9ActionPerformed

    private void fDay10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay10ActionPerformed

    private void fDay11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay11ActionPerformed

    private void fLead7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead7MouseClicked
        if(fLead7.isSelected()){
            leadAmtS[7] = JOptionPane.showInputDialog(null, "Enter the Upgrade amount that will be added to your Pay:", "", 1);
            if(leadAmtS[7] == null){
                fLead7.doClick();
                return;
            }
            try{
                leadAmt[7] = Double.parseDouble(leadAmtS[7]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead7.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[7] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[7] == null){
                fLead7.doClick();
                return;
            }
            if(leadHrsS[7].isEmpty()){
                leadHrsS[7] = "0";
            }
            try{
                leadHrs[7] = Double.parseDouble(leadHrsS[7]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead7.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead7MouseClicked

    private void fLead7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead7ActionPerformed

    private void fDay12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay12ActionPerformed

    private void f7th1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th1ActionPerformed

    private void fLead1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead1MouseClicked
        if(fLead1.isSelected()){
            leadAmtS[1] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[1] == null){
                fLead1.doClick();
                return;
            }
            try{
                leadAmt[1] = Double.parseDouble(leadAmtS[1]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead1.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[1] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[1] == null){
                fLead1.doClick();
                return;
            }
            if(leadHrsS[1].isEmpty()){
                leadHrsS[1] = "0";
            }
            try{
                leadHrs[1] = Double.parseDouble(leadHrsS[1]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead1.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead1MouseClicked

    private void fLead1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead1ActionPerformed

    private void fHol1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol1MouseClicked
        if(fHol1.isSelected()){
            isHol[1] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol1MouseClicked

    private void fHol1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol1ActionPerformed

    private void f7th2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th2ActionPerformed

    private void fLead2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead2MouseClicked
        if(fLead2.isSelected()){
            leadAmtS[2] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[2] == null){
                fLead2.doClick();
                return;
            }
            try{
                leadAmt[2] = Double.parseDouble(leadAmtS[2]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead2.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[2] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[2] == null){
                fLead2.doClick();
                return;
            }
            if(leadHrsS[2].isEmpty()){
                leadHrsS[2] = "0";
            }
            try{
                leadHrs[2] = Double.parseDouble(leadHrsS[2]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead2.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead2MouseClicked

    private void fLead2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead2ActionPerformed

    private void fHol2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol2MouseClicked
        if(fHol2.isSelected()){
            isHol[2] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol2MouseClicked

    private void fHol2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol2ActionPerformed

    private void f7th3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th3ActionPerformed

    private void fHol7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol7MouseClicked
        if(fHol7.isSelected()){
            isHol[7] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol7MouseClicked

    private void fHol7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol7ActionPerformed

    private void fLead3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead3MouseClicked
        if(fLead3.isSelected()){
            leadAmtS[3] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[3] == null){
                fLead3.doClick();
                return;
            }
            try{
                leadAmt[3] = Double.parseDouble(leadAmtS[3]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead3.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[3] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[3] == null){
                fLead3.doClick();
                return;
            }
            if(leadHrsS[3].isEmpty()){
                leadHrsS[3] = "0";
            }
            try{
                leadHrs[3] = Double.parseDouble(leadHrsS[3]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead3.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead3MouseClicked

    private void fLead3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead3ActionPerformed

    private void fDay13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDay13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDay13ActionPerformed

    private void fHol3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol3MouseClicked
        if(fHol3.isSelected()){
            isHol[3] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol3MouseClicked

    private void fHol3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol3ActionPerformed

    private void f7th8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th8ActionPerformed

    private void fLead8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead8MouseClicked
        if(fLead8.isSelected()){
            leadAmtS[8] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[8] == null){
                fLead8.doClick();
                return;
            }
            try{
                leadAmt[8] = Double.parseDouble(leadAmtS[8]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead8.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[8] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[8] == null){
                fLead8.doClick();
                return;
            }
            if(leadHrsS[8].isEmpty()){
                leadHrsS[8] = "0";
            }
            try{
                leadHrs[8] = Double.parseDouble(leadHrsS[8]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead8.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead8MouseClicked

    private void fLead8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead8ActionPerformed

    private void fHol8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol8MouseClicked
        if(fHol8.isSelected()){
            isHol[8] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol8MouseClicked

    private void fHol8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol8ActionPerformed

    private void f7th9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th9ActionPerformed

    private void fLead9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead9MouseClicked
       if(fLead9.isSelected()){
            leadAmtS[9] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[9] == null){
                fLead9.doClick();
                return;
            }
            try{
                leadAmt[9] = Double.parseDouble(leadAmtS[9]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead9.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[9] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[9] == null){
                fLead9.doClick();
                return;
            }
            if(leadHrsS[9].isEmpty()){
                leadHrsS[9] = "0";
            }
            try{
                leadHrs[9] = Double.parseDouble(leadHrsS[9]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead9.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead9MouseClicked

    private void fLead9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead9ActionPerformed

    private void fHol9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol9MouseClicked
        if(fHol9.isSelected()){
            isHol[9] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol9MouseClicked

    private void fHol9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol9ActionPerformed

    private void f7th10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th10ActionPerformed

    private void fLead10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead10MouseClicked
        if(fLead10.isSelected()){
            leadAmtS[10] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[10] == null){
                fLead10.doClick();
                return;
            }
            try{
                leadAmt[10] = Double.parseDouble(leadAmtS[10]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead10.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[10] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[10] == null){
                fLead10.doClick();
                return;
            }
            if(leadHrsS[10].isEmpty()){
                leadHrsS[10] = "0";
            }
            try{
                leadHrs[10] = Double.parseDouble(leadHrsS[10]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead10.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead10MouseClicked

    private void fLead10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead10ActionPerformed

    private void fHol10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol10MouseClicked
        if(fHol10.isSelected()){
            isHol[10] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol10MouseClicked

    private void fHol10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol10ActionPerformed

    private void f7th4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th4ActionPerformed

    private void f7th11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th11ActionPerformed

    private void fLead11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead11MouseClicked
        if(fLead11.isSelected()){
            leadAmtS[11] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[11] == null){
                fLead11.doClick();
                return;
            }
            try{
                leadAmt[11] = Double.parseDouble(leadAmtS[11]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead11.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[11] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[11] == null){
                fLead11.doClick();
                return;
            }
            if(leadHrsS[11].isEmpty()){
                leadHrsS[11] = "0";
            }
            try{
                leadHrs[11] = Double.parseDouble(leadHrsS[11]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead11.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead11MouseClicked

    private void fLead11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead11ActionPerformed

    private void fHol11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol11MouseClicked
        if(fHol11.isSelected()){
            isHol[11] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol11MouseClicked

    private void fHol11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol11ActionPerformed

    private void f7th12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th12ActionPerformed

    private void fLead12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead12MouseClicked
        if(fLead12.isSelected()){
            leadAmtS[12] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[12] == null){
                fLead12.doClick();
                return;
            }
            try{
                leadAmt[12] = Double.parseDouble(leadAmtS[12]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead12.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[12] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[12] == null){
                fLead12.doClick();
                return;
            }
            if(leadHrsS[12].isEmpty()){
                leadHrsS[12] = "0";
            }
            try{
                leadHrs[12] = Double.parseDouble(leadHrsS[12]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead12.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead12MouseClicked

    private void fLead12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead12ActionPerformed

    private void fHol12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol12MouseClicked
        if(fHol12.isSelected()){
            isHol[12] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol12MouseClicked

    private void fHol12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol12ActionPerformed

    private void f7th13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th13ActionPerformed

    private void fLead13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead13MouseClicked
        if(fLead13.isSelected()){
            leadAmtS[13] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[13] == null){
                fLead13.doClick();
                return;
            }
            try{
                leadAmt[13] = Double.parseDouble(leadAmtS[13]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead13.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[13] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[13] == null){
                fLead13.doClick();
                return;
            }
            if(leadHrsS[13].isEmpty()){
                leadHrsS[13] = "0";
            }
            try{
                leadHrs[13] = Double.parseDouble(leadHrsS[13]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead13.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead13MouseClicked

    private void fLead13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead13ActionPerformed

    private void fHol13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol13MouseClicked
        if(fHol13.isSelected()){
            isHol[13] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol13MouseClicked

    private void fHol13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol13ActionPerformed

    private void fLead4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead4MouseClicked
        if(fLead4.isSelected()){
            leadAmtS[4] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[4] == null){
                fLead4.doClick();
                return;
            }
            try{
                leadAmt[4] = Double.parseDouble(leadAmtS[4]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead4.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[4] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[4] == null){
                fLead4.doClick();
                return;
            }
            if(leadHrsS[4].isEmpty()){
                leadHrsS[4] = "0";
            }
            try{
                leadHrs[4] = Double.parseDouble(leadHrsS[4]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead4.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead4MouseClicked

    private void fLead4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead4ActionPerformed

    private void fHol4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol4MouseClicked
        if(fHol4.isSelected()){
            isHol[4] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol4MouseClicked

    private void fHol4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol4ActionPerformed

    private void f7th5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th5ActionPerformed

    private void fLead5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead5MouseClicked
        if(fLead5.isSelected()){
            leadAmtS[5] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[5] == null){
                fLead5.doClick();
                return;
            }
            try{
                leadAmt[5] = Double.parseDouble(leadAmtS[5]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead5.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[5] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[5] == null){
                fLead5.doClick();
                return;
            }
            if(leadHrsS[5].isEmpty()){
                leadHrsS[5] = "0";
            }
            try{
                leadHrs[5] = Double.parseDouble(leadHrsS[5]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead5.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead5MouseClicked

    private void fLead5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead5ActionPerformed

    private void fHol5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol5MouseClicked
        if(fHol5.isSelected()){
            isHol[5] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol5MouseClicked

    private void fHol5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol5ActionPerformed

    private void f7th6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th6ActionPerformed

    private void fLead6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fLead6MouseClicked
        if(fLead6.isSelected()){
            leadAmtS[6] = JOptionPane.showInputDialog(null, "Pay Upgrade amount:", "", 1);
            if(leadAmtS[6] == null){
                fLead6.doClick();
                return;
            }
            try{
                leadAmt[6] = Double.parseDouble(leadAmtS[6]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Amount box. Please try again.");
                fLead6.doClick();
                return;
            }    
            JOptionPane.showMessageDialog(null, "ONLY enter hours in the next "
                    + "box if you're Upgrade was NOT for the whole day!" + '\n' + "The "
                    + "main Hours box should reflect the entire days hours either way.");
            leadHrsS[6] = JOptionPane.showInputDialog(null, "Pay Upgrade Hours:", "", 1);
            if(leadHrsS[6] == null){
                fLead6.doClick();
                return;
            }
            if(leadHrsS[6].isEmpty()){
                leadHrsS[6] = "0";
            }
            try{
                leadHrs[6] = Double.parseDouble(leadHrsS[6]);
            }            
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                        + "numeric value in the Pay Upgrade Hours box. Please try again.");
                fLead6.doClick();         
            }                          
        }
    }//GEN-LAST:event_fLead6MouseClicked

    private void fLead6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fLead6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fLead6ActionPerformed

    private void fTNetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTNetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fTNetActionPerformed

    private void fHol6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fHol6MouseClicked
        if(fHol6.isSelected()){
            isHol[6] = JOptionPane.showConfirmDialog(null, "Is this your scheduled shift?", "", JOptionPane.YES_NO_OPTION);
        }
    }//GEN-LAST:event_fHol6MouseClicked

    private void fHol6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fHol6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fHol6ActionPerformed

    private void fTGrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTGrossActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fTGrossActionPerformed

    private void f7th7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f7th7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f7th7ActionPerformed

    private void fGross1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fGross1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fGross1ActionPerformed

    private void fTHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTHoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fTHoursActionPerformed

    private void fGross0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fGross0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fGross0ActionPerformed

    private void fNet0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fNet0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fNet0ActionPerformed

    private void f401KActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f401KActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f401KActionPerformed

    private void fNet1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fNet1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fNet1ActionPerformed

    private void fTotalDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTotalDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fTotalDActionPerformed

    private void fUnionDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fUnionDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fUnionDActionPerformed

    private void f401kDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f401kDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_f401kDActionPerformed

    private void fTaxDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTaxDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fTaxDActionPerformed

    private void fChkUnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fChkUnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fChkUnActionPerformed

    
    private void get(){
        
        String[]fDays = new String [14];
        
        fDays[0] = fDay0.getText();
        fDays[1] = fDay1.getText();
        fDays[2] = fDay2.getText();
        fDays[3] = fDay3.getText();
        fDays[4] = fDay4.getText();
        fDays[5] = fDay5.getText();
        fDays[6] = fDay6.getText();
        fDays[7] = fDay7.getText();
        fDays[8] = fDay8.getText();
        fDays[9] = fDay9.getText();
        fDays[10] = fDay10.getText();
        fDays[11] = fDay11.getText();
        fDays[12] = fDay12.getText();
        fDays[13] = fDay13.getText();
        
        for(int i = 0; i < 14; i++){
            if(fDays[i].isEmpty()){
                fDays[i] = "0";               
            }
        }
        
        for(int i = 0; i < 14; i++){
            try{    
                hour[i] = Double.parseDouble(fDays[i]);               
            }                     
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "You have entered a non-"
                    + "numeric value in one or more of the Hours boxes. Please try again.");
            return;
            }
        }
        
        for(int i = 0; i < 14; i++){
            if(hour[i] > 24){
                JOptionPane.showMessageDialog(null, "There are only 24 hours "
                        + "in a day, Please review the Hours you have entered.");
                return;
            }
            if(hour[i] > 16 && hour[i] <= 24){
                JOptionPane.showMessageDialog(null, "The law only allows you "
                        + "to work 16 hours in a day, Please review the Hours you have entered.");
            }
            if(hour[i] > 12.25 && hour[i] <= 16){
                JOptionPane.showMessageDialog(null, "A normal shift is between "
                        + "8 and 12.25 hours, Please review the Hours you have entered.");
            }
            break;
        }        
        
        String wageS = fWage.getText(); 
        
        if(wageS.isEmpty()){
            wageS = "0";
            JOptionPane.showMessageDialog(null, "You should enter a value in "
                    + "the Hourly Wage box.");
        }
        
        try{
        wage = Double.parseDouble(wageS);
        }            
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "You have entered a non-"
                    + "numeric value in the Hourly Wage box. Please try again");
            return;
        }
                
        String taxS = fTax.getText();
        
        if(taxS.isEmpty()){
            taxS = "0";
        }
        
        try{
        tax = Double.parseDouble(taxS);
        }            
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "You have entered a non-"
                    + "numeric value in the Tax Rate box. Please try again");
            return;
        }
        if(tax >= 1.0){
            JOptionPane.showMessageDialog(null, "The tax rate should be "
                    + "entered as a decimal number. (Example: .07)");
            fTax.setText("");
            return;
        }
               
        String insS = fIns.getText();
        
        if(insS.isEmpty()){
            insS = "0";
        }
        
        try{
        ins = Double.parseDouble(insS);
        }            
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "You have entered a non-"
                    + "numeric value in the Insurance box. Please try again");
            return;
        }
                
//        String unionS = fUnion.getText();
//        
//        if(unionS.isEmpty()){
//            unionS = "0";
//        }
//        
//        try{
//        union = Double.parseDouble(unionS);
//        }            
//        catch(NumberFormatException e){
//            JOptionPane.showMessageDialog(null, "You have entered a non-"
//                    + "numeric value in the Union Dues box. Please try again");
//            return;
//        }
//        if(union >= 1.0){
//            JOptionPane.showMessageDialog(null, "Union dues should be "
//                    + "entered as a decimal number. (Example: .07)");
//            fUnion.setText("");
//            return;
//        }
        
        String k401S = f401K.getText();
        
        if(k401S.isEmpty()){
            k401S = "0";
        }
        
        try{
        k401 = Double.parseDouble(k401S);
        }            
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "You have entered a non-"
                    + "numeric value in the 401K box. Please try again");
            return;
        }
        if(k401 >= 1.0){
            JOptionPane.showMessageDialog(null, "The 401K rate should be "
                    + "entered as a decimal number. (Example: .07)");
            f401K.setText("");
            return;
        }
        
        box();
    }
        
    
    private void box(){
        
        b7th[0] = f7th0.isSelected();
        b7th[1] = f7th1.isSelected();
        b7th[2] = f7th2.isSelected();
        b7th[3] = f7th3.isSelected();
        b7th[4] = f7th4.isSelected();
        b7th[5] = f7th5.isSelected();
        b7th[6] = f7th6.isSelected();
        b7th[7] = f7th7.isSelected();
        b7th[8] = f7th8.isSelected();
        b7th[9] = f7th9.isSelected();
        b7th[10] = f7th10.isSelected();
        b7th[11] = f7th11.isSelected();
        b7th[12] = f7th12.isSelected();
        b7th[13] = f7th13.isSelected();
        
        for(int i = 0; i < 14; i++){
            if(b7th[i] == true){
                chk7th = true;
            }           
        }
        
        if(b7th[0] == false && b7th[1] == false && 
                b7th[2] == false && b7th[3] == false && b7th[4] == false && 
                b7th[5] == false && b7th[6] == false &&  b7th[7] == false && 
                b7th[8] == false && b7th[9] == false && b7th[10] == false && 
                b7th[11] == false && b7th[12] == false && b7th[13] == false){
            chk7th = false;
        }
        
        if(chk7th == true){ 
            num1 = 0;
            num2 = 0;
            
            for(int i = 0; i < 7; i++){
                if(b7th[i] == true){
                    is7th1 = true;
                    num1 ++;               
                }
            }
        
            for(int i = 7; i < 14; i++){
                if(b7th[i] == true){
                    is7th2 = true;
                    num2 ++;               
                }
            }
        
            if(num1 > 1){
                JOptionPane.showMessageDialog(null, "You have multiple 7th Day boxes "
                    + "checked in Week 1, Please uncheck all but one of them."); 
                return;
            }
        
            if(num2 > 1){
                JOptionPane.showMessageDialog(null, "You have multiple 7th Day boxes "
                    + "checked in Week 2, Please uncheck all but one of them.");
                return;
            }
        }
        
        
        
        hol[0] = fHol0.isSelected();
        hol[1] = fHol1.isSelected();
        hol[2] = fHol2.isSelected();
        hol[3] = fHol3.isSelected();
        hol[4] = fHol4.isSelected();
        hol[5] = fHol5.isSelected();
        hol[6] = fHol6.isSelected();
        hol[7] = fHol7.isSelected();
        hol[8] = fHol8.isSelected();
        hol[9] = fHol9.isSelected();
        hol[10] = fHol10.isSelected();
        hol[11] = fHol11.isSelected();
        hol[12] = fHol12.isSelected();
        hol[13] = fHol13.isSelected();
        
        for(int i = 0; i < 14; i++){
            if(hol[i] == true){
                holChk = true;
            }
            
            if(hol[i] == false && b7th[i] == true && hour[i] == 0.0){
                    JOptionPane.showMessageDialog(null, "You have selected a 7th "
                        + "day but haven't entered any Hours for that day");
                    return;
                }
        }
        
        if(hol[0] == false && hol[1] == false && 
                hol[2] == false && hol[3] == false && hol[4] == false && 
                hol[5] == false && hol[6] == false && hol[7] == false && 
                hol[8] == false && hol[9] == false && hol[10] == false && 
                hol[11] == false && hol[12] == false && hol[13] == false){
            holChk = false;
        }
        
        if(holChk == true){
            for(int i = 0; i < 14; i++){    
                if(b7th[i] == false && hol[i] == true && hour[0] == 0.0){
                    JOptionPane.showMessageDialog(null, "If you select a holiday, "
                        + "and select Yes its your scheduled shift," + '\n' + " and do NOT "
                        + "enter an Hour amount you will be given 12 hours for the day."); 
                    break;
                }
            
                if(b7th[i] == true && hol[i] == true && hour[0] == 0.0){
                    JOptionPane.showMessageDialog(null, "You have selected a 7th "
                        + "day and a Holiday but haven't entered any Hours for that day");
                return;
                }
            }
        }
        
        lead[0] = fLead0.isSelected();
        lead[1] = fLead1.isSelected();
        lead[2] = fLead2.isSelected();
        lead[3] = fLead3.isSelected();
        lead[4] = fLead4.isSelected();
        lead[5] = fLead5.isSelected();
        lead[6] = fLead6.isSelected();
        lead[7] = fLead7.isSelected();
        lead[8] = fLead8.isSelected();
        lead[9] = fLead9.isSelected();
        lead[10] = fLead10.isSelected();
        lead[11] = fLead11.isSelected();
        lead[12] = fLead12.isSelected();
        lead[13] = fLead13.isSelected();
        
        for(int i = 0; i < 14; i++){
            if(lead[i] == true){
                leadChk = true;
            }
        }
        
        if(lead[0] == false && lead[1] == false && 
                lead[2] == false && lead[3] == false && lead[4] == false && 
                lead[5] == false && lead[6] == false && lead[7] == false && 
                lead[8] == false && lead[9] == false && lead[10] == false && 
                lead[11] == false && lead[12] == false && lead[13] == false){
            leadChk = false;
        }
        
        if(leadChk == true){
            for(int i = 0; i < 14; i++){
                if(lead[i] == true && hol[i] == false && hour[i] == 0.0){
                    JOptionPane.showMessageDialog(null, "You have selected a pay "
                        + "Upgrade but you didn't enter Hours for it.");
                    return;
                }
                
                if(lead[i] == true && hol[i] == true && hour[i] == 0.0){
                    JOptionPane.showMessageDialog(null, "You have selected a pay "
                        + "Upgrade on a Holiday you didn't enter Hours for.");
                    return;
                }
            }
        }
        calc();
    }
    
    
    private void calc(){
        
        for(int i = 0; i < 14; i++){
                holHour[i] = 0.0;
        }
                
        week1 = hour[0] + hour[1] + hour[2] + hour[3] + hour[4] + hour[5] + hour[6];
        week2 = hour[7] + hour[8] + hour[9] + hour[10] + hour[11] + hour[12] + hour[13];
        
        if(week1 > 40 || week2 > 40){
       
            if(week1 > 40){
                oT1 = true;
                oThour1 = (week1 - 40) * .5;    
                
                if(hour[0] + hour[1] > 40){
                    spltDay1 = 1.0;
                    spltHour1 = 40 - hour[0];                    
                }
                else if(hour[0] + hour[1] + hour[2] > 40){
                    spltDay1 = 2.0;
                    spltHour1 = 40 - (hour[0] + hour[1]);
                }
                else if(hour[0] + hour[1] + hour[2] + hour[3] > 40){
                    spltDay1 = 3.0;
                    spltHour1 = 40 - (hour[0] + hour[1] + hour[2]);
                }
                else if(hour[0] + hour[1] + hour[2] + hour[3] + hour[4] > 40){
                    spltDay1 = 4.0;
                    spltHour1 = 40 - (hour[0] + hour[1] + hour[2] + hour[3]);
                }
                else if(hour[0] + hour[1] + hour[2] + hour[3] + hour[4] + hour[5] > 40){
                    spltDay1 = 5.0;
                    spltHour1 = 40 - (hour[0] + hour[1] + hour[2] + hour[3] + hour[4]);
                }
                else if(hour[0] + hour[1] + hour[2] + hour[3] + hour[4] + hour[5] + hour[6] > 40){
                    spltDay1 = 6.0;
                    spltHour1 = 40 - (hour[0] + hour[1] + hour[2] + hour[3] + hour[4] + hour[5]);
                }
            }
            else {
                oT1 = false;
                oThour1 = 0.0;
                spltDay1 = 0.0;
            } 

            if(week2 > 40){
                oT2 = true;
                oThour2 = (week2 - 40) * .5;
                
                if(hour[7] + hour[8] > 40){
                    spltDay2 = 8.0;
                    spltHour2 = 40 - hour[7];
                }
                else if(hour[7] + hour[8] + hour[9] > 40){
                    spltDay2 = 9.0;
                    spltHour2 = 40 - (hour[7] + hour[8]);
                }
                else if(hour[7] + hour[8] + hour[9] + hour[10] > 40){
                    spltDay2 = 10.0;
                    spltHour2 = 40 - (hour[7] + hour[8] + hour[9]);
                }
                else if(hour[7] + hour[8] + hour[9] + hour[10] + hour[11] > 40){
                    spltDay2 = 11.0;
                    spltHour2 = 40 - (hour[7] + hour[8] + hour[9] + hour[10]);
                }
                else if(hour[7] + hour[8] + hour[9] + hour[10] + hour[11] + hour[12] > 40){
                    spltDay2 = 12.0;
                    spltHour2 = 40 - (hour[7] + hour[8] + hour[9] + hour[10] + hour[11]);
                }
                else if(hour[7] + hour[8] + hour[9] + hour[10] + hour[11] + hour[12] + hour[13] > 40){
                    spltDay2 = 13.0;
                    spltHour2 = 40 - (hour[7] + hour[8] + hour[9] + hour[10] + hour[11] + hour[12]);
                } 
            }
            else {
                oT2 = false;
                oThour2 = 0.0;
                spltDay2 = 0.0;
            }   
        }

        week1 = 0.0;
        week2 = 0.0;
        
        if(oT1 == false){
            for(int i = 0; i < 7; i++){
                if(b7th[i] == true && hol[i] == false){
                    hour7th1 = (hour[i]);
                }
                
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    holHour[i] = 12.0;
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    holHour[i] = 12 + hour[i];
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    holHour[i] = hour[i] * 2;
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    holHour[i] = hour[i] * 2;
                }
                
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    holHour[i] = 12.0;
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] > 0.0 && hour[i] < 12){
                    holHour[i] = (hour[i] * 1.5) + (12 - hour[i]);
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    holHour[i] = hour[i] * 1.5;
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    holHour[i] = hour[i] * 1.5;
                }
            }            
        }
            
        if(oT2 == false){ 
            for(int i = 7; i < 14; i++){
                if(b7th[i] == true && hol[i] == false){
                    hour7th2 = (hour[i]);
                }
                
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    holHour[i] = 12.0;
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    holHour[i] = 12 + hour[i];
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    holHour[i] = hour[i] * 2;
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    holHour[i] = hour[i] * 2;
                }
                
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    holHour[i] = 12.0;
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    holHour[i] = (hour[i] * 1.5) + (12 - hour[i]);
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    holHour[i] = hour[i] * 1.5;
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    holHour[i] = hour[i] * 1.5;
                }
            }
        }
        
        week1 = hour[0] + hour[1] + hour[2] + hour[3] + hour[4] + hour[5] + hour[6];
        week2 = hour[7] + hour[8] + hour[9] + hour[10] + hour[11] + hour[12] + hour[13];        
    
        if(oT1 == true){
            
            if(b7th[0] == true && hol[0] == false){
                hour7th1 = hour[0];
            }
            
            if(b7th[0] == true && hol[0] == true && isHol[0] == 0 && hour[0] > 0 && hour[0] < 12){
                holHour[0] = 12.0 + hour[0];
            }
            if(b7th[0] == true && hol[0] == true && isHol[0] == 0 && hour[0] >= 12){
                holHour[0] = hour[0] * 2;
            }
            if(b7th[0] == true && hol[0] == true && isHol[0] == 1 && hour[0] > 0){
                holHour[0] = hour[0] * 2;
            }
            
            if(b7th[0] == false && hol[0] == true && isHol[0] == 0 && hour[0] == 0){
                holHour[0] = 12.0;
            }
            if(b7th[0] == false && hol[0] == true && isHol[0] == 0 && hour[0] > 0.0 && hour[0] < 12){
                holHour[0] = (hour[0] * 1.5) + (12 - hour[0]);
            }
            if(b7th[0] == false && hol[0] == true && isHol[0] == 0 && hour[0] >= 12){
                holHour[0] = hour[0] * 1.5;
            }
            if(b7th[0] == false && hol[0] == true && isHol[0] == 1 && hour[0] > 0){
                holHour[0] = hour[0] * 1.5;
            }
            
            for(int i = 0; i < 7; i++){
                
                if(b7th[i] == true && hol[i] == false){
                    day1 = i;
                    if(day1 < spltDay1){
                        hour7th1 = hour[i];
                    }
                    if(day1 > spltDay1){
                        hour7th1 = hour[i] * .5;
                    }
                }
                
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = 12 + hour[i];
                    }
                    if(day1 > spltDay1){
                        holHour[i] = 12 + (hour[i] * .5);
                    }
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = hour[i] * 2;
                    }
                    if(day1 > spltDay1){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = hour[i] * 2;
                    }
                    if(day1 > spltDay1){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                }
                
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = 12.0;
                    }
                    if(day1 > spltDay1){
                        holHour[i] = 12.0;
                    }
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = 12.0 + (hour[i] * .5);
                    }
                    if(day1 > spltDay1){
                        holHour[i] = 12.0;
                    }
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                    if(day1 > spltDay1){
                        holHour[i] = hour[i];
                    }
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    day1 = i;
                    if(day1 < spltDay1){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                    if(day1 > spltDay1){
                        holHour[i] = hour[i];
                    }
                }
                
                double iD = i;
                if(spltDay1 == iD && b7th[i] == true && hol[i] == false){
                    double after40 = hour[i] - spltHour1;
                    hour7th1 = (after40 * .5) + (hour[i] - after40);
                }
                
                if(spltDay1 == iD && b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    double after40 = hour[i] - spltHour1;
                    holHour[i] = (after40 * .5) + spltHour1 + 12.0;
                }
                if(spltDay1 == iD && b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    double after40 = hour[i] - spltHour1;
                    holHour[i] = after40 + (after40 * .5) + (spltHour1 + spltHour1);
                }
                if(spltDay1 == iD && b7th[i] == true && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    double after40 = hour[i] - spltHour1;
                    holHour[i] = after40 + (after40 * .5) + (spltHour1 + spltHour1);
                }
                
                if(spltDay1 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    holHour[i] = 12.0;
                }
                if(spltDay1 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] > 0.0 && hour[i] < 12){
                    holHour[i] = (spltHour1 * .5) + 12;
                }
                if(spltDay1 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    double after40 = hour[i] - spltHour1;
                    holHour[i] = after40 + spltHour1 + (spltHour1 * .5);
                }
                if(spltDay1 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    double after40 = hour[i] - spltHour1;
                    holHour[i] = after40 + spltHour1 + (spltHour1 * .5);
                }
            }
        }
            
        if(oT2 == true){
            
            if(b7th[7] == true && hol[7] == false){
                hour7th1 = hour[7];
            }
            
            if(b7th[7] == true && hol[7] == true && isHol[7] == 0 && hour[7] > 0 && hour[7] < 12){
                holHour[7] = 12.0 + hour[7];
            }
            if(b7th[7] == true && hol[7] == true && isHol[7] == 0 && hour[7] >= 12){
                holHour[7] = hour[7] * 2;
            }
            if(b7th[7] == true && hol[7] == true && isHol[7] == 1 && hour[7] > 0){
                holHour[7] = hour[7] * 2;
            }
            
            if(b7th[7] == false && hol[7] == true && isHol[7] == 0 && hour[7] == 0){
                holHour[7] = 12.0;
            }
            if(b7th[7] == false && hol[7] == true && isHol[7] == 0 && hour[7] > 0.0 && hour[7] < 12){
                holHour[7] = (hour[7] * 1.5) + (12 - hour[7]);
            }
            if(b7th[7] == false && hol[7] == true && isHol[7] == 0 && hour[7] >= 12){
                holHour[7] = hour[7] * 1.5;
            }
            if(b7th[7] == false && hol[7] == true && isHol[7] == 1 && hour[7] > 0){
                holHour[7] = hour[7] * 1.5;
            }
            
            for(int i = 7; i < 14; i++){                
                
                if(b7th[i] == true && hol[i] == false){
                    day2 = i;
                    if(day2 < spltDay2){
                        hour7th2 = hour[i];
                    }
                    if(day2 > spltDay2){
                        hour7th2 = hour[i] * .5;
                    }
                }
                
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = 12 + hour[i];
                    }
                    if(day2 > spltDay2){
                        holHour[i] = 12 + (hour[i] * .5);
                    }
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = hour[i] * 2;
                    }
                    if(day2 > spltDay2){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                }
                if(b7th[i] == true && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = hour[i] * 2;
                    }
                    if(day2 > spltDay2){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                }
                
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = 12.0;
                    }
                    if(day2 > spltDay2){
                        holHour[i] = 12.0;
                    }
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = 12.0 + (hour[i] * .5);
                    }
                    if(day2 > spltDay2){
                        holHour[i] = 12.0;
                    }
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                    if(day2 > spltDay2){
                        holHour[i] = hour[i];
                    }
                }
                if(b7th[i] == false && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    day2 = i;
                    if(day2 < spltDay2){
                        holHour[i] = hour[i] + (hour[i] * .5);
                    }
                    if(day2 > spltDay2){
                        holHour[i] = hour[i];
                    }
                }
                
                double iD = i;
                if(spltDay2 == iD && b7th[i] == true && hol[i] == false){
                    double after40 = hour[i] - spltHour2;
                    hour7th2 = (after40 * .5) + (hour[i] - after40);
                }
                
                if(spltDay2 == iD && b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    double after40 = hour[i] - spltHour2;
                    holHour[i] = (after40 * .5) + spltHour2 + 12;
                }
                if(spltDay2 == iD && b7th[i] == true && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    double after40 = hour[i] - spltHour2;
                    holHour[i] = after40 + (after40 * .5) + (spltHour2 + spltHour2);
                }
                if(spltDay2 == iD && b7th[i] == true && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    double after40 = hour[i] - spltHour2;
                    holHour[i] = after40 + (after40 * .5) + (spltHour2 + spltHour2);
                }
                
                if(spltDay2 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] == 0){
                    holHour[i] = 12.0;
                }
                if(spltDay2 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] > 0 && hour[i] < 12){
                    holHour[i] = (spltHour2 * .5) + 12;
                }
                if(spltDay2 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 0 && hour[i] >= 12){
                    double after40 = hour[i] - spltHour2;
                    holHour[i] = after40 + spltHour2 + (spltHour2 * .5);
                }
                if(spltDay2 == iD && b7th[i] == false && hol[i] == true && isHol[i] == 1 && hour[i] > 0){
                    double after40 = hour[i] - spltHour2;
                    holHour[i] = after40 + spltHour2 + (spltHour2 * .5);
                }
            }
        }
        
        otherHr1 = oThour1 + hour7th1 + holHour[0] + holHour[1] + holHour[2] 
                + holHour[3] + holHour[4] + holHour[5] + holHour[6] + holHour1;
        
        otherHr2 = oThour2 + hour7th2 + holHour[7] + holHour[8] + holHour[9] 
                + holHour[10] + holHour[11] + holHour[12] + holHour[13] + holHour2;
        
        tHour = week1 + week2 + otherHr1 + otherHr2;
        
        gross1 = (week1 + otherHr1) * wage;
        gross2 = (week2 + otherHr2) * wage;
        
        if(gross1 > 0.0){
            
            if(fChkUn.isSelected()){
            Double un1 = gross1 * .0145;
            Double un2 = gross1 / week1 * 1.2923;
            if(un2 > un1){
                union1 = un1;
            }
            else {
                union1 = un2;
            }
            Double otherUn = union1 + (week1 * .02);
            union1 = otherUn;
            }
            
            k1 = gross1 * k401;
            Double preTax1 = gross1 - k1;
            tax1 = preTax1 * tax;
            Double deduct1 = k1 + tax1 + union1 + ins;
            net1 = gross1 - deduct1;

        }
        
        if(gross2 > 0.0){
            
            if(fChkUn.isSelected()){
            Double un1 = gross2 * .0145;
            Double un2 = gross2 / week2 * 1.2923;
            if(un2 > un1){
                union2 = un1;
            }
            else {
                union2 = un2;
            }
            Double otherUn = union2 + (week2 * .02);
            union2 = otherUn;
            }
            
            k2 = gross2 * k401;
            Double preTax2 = gross2 - k2;
            tax2 = preTax2 * tax;
            Double deduct2 = k2 + tax2 + union2;
            net2 = gross2 - deduct2;

        }
        
        taxD = tax1 + tax2;
        unionD = union1 + union2;
        D401k = k1 + k2;
        
        tNet = net1 + net2;
        
        BigDecimal taxBD = BigDecimal.valueOf(taxD);
        taxBD = taxBD.setScale(2, RoundingMode.HALF_UP);
        
        BigDecimal kBD = BigDecimal.valueOf(D401k);
        kBD = kBD.setScale(2, RoundingMode.HALF_UP);
        
        BigDecimal unionBD = BigDecimal.valueOf(unionD);
        unionBD = unionBD.setScale(2, RoundingMode.HALF_UP);
        
        BigDecimal grossD1 = BigDecimal.valueOf(gross1);
        grossD1 = grossD1.setScale(2, RoundingMode.HALF_UP);
                
        BigDecimal grossD2 = BigDecimal.valueOf(gross2);
        grossD2 = grossD2.setScale(2, RoundingMode.HALF_UP);
        
        
        BigDecimal netD1 = BigDecimal.valueOf(net1);
        netD1 = netD1.setScale(2, RoundingMode.HALF_UP);
                
        BigDecimal netD2 = BigDecimal.valueOf(net2);
        netD2 = netD2.setScale(2, RoundingMode.HALF_UP);
        
        
        BigDecimal tGrossD = grossD1.add(grossD2);
        BigDecimal tNetD = netD1.add(netD2);
        
        tGross = tGrossD.doubleValue();
        gross1 = grossD1.doubleValue();
        gross2 = grossD2.doubleValue();
        
        tNet = tNetD.doubleValue();
        net1 = netD1.doubleValue();
        net2 = netD2.doubleValue();
        
        taxD = taxBD.doubleValue();
        unionD = unionBD.doubleValue();
        D401k = kBD.doubleValue();
        
        totalD = taxD + unionD + D401k + ins;
        BigDecimal totalBD = BigDecimal.valueOf(totalD);
        totalBD = totalBD.setScale(2, RoundingMode.HALF_UP);
        totalD = totalBD.doubleValue();
                
        set();
    }
    
    
    private void set(){
        
        String hourS0 = Double.toString(week1);
        fHours0.setText(hourS0);
        String hourS1 = Double.toString(week2);
        fHours1.setText(hourS1);
        
        String otherHrS0 = Double.toString(otherHr1);
        fOtHours0.setText(otherHrS0);
        String otherHrS1 = Double.toString(otherHr2);
        fOtHours1.setText(otherHrS1);
        
        String tHours = Double.toString(tHour);
        fTHours.setText(tHours);
        
        String grS1 = Double.toString (gross1);
        fGross0.setText(grS1);
        String grS2 = Double.toString (gross2);
        fGross1.setText(grS2);
        
        String tGrsS = Double.toString (tGross);
        fTGross.setText(tGrsS);
        
        String net1S = Double.toString (net1);
        fNet0.setText(net1S);       
        String net2S = Double.toString (net2);
        fNet1.setText(net2S);
        
        String tNetS = Double.toString (tNet);
        fTNet.setText(tNetS);
        
        String tTaxS = Double.toString (taxD);
        fTaxD.setText(tTaxS);
        
        String tUnionS = Double.toString (unionD);
        fUnionD.setText(tUnionS);
        
        String t401kS = Double.toString (D401k);
        f401kD.setText(t401kS);
        
        String totalS = Double.toString (totalD);
        fTotalD.setText(totalS);
        
        for(int i = 0; i < 14; i++){
        holHour[i] = 0.0;
        }
        hour7th1 = 0.0;
        hour7th2 = 0.0; 
        oT1 = false;
        oT2 = false;
        oThour1 = 0.0;
        oThour2 = 0.0;
        week1 = 0.0;
        week2 = 0.0;
        otherHr1 = 0.0;
        otherHr2 = 0.0; 
        tGross = 0.0;
        spltDay1 = 0.0;
        spltDay2 = 0.0;
        spltHour1 = 0.0;
        spltHour2 = 0.0;
        tax1 = 0.0;
        tax2 = 0.0;
        union1 = 0.0;
        union2 = 0.0;
        k1 = 0.0;
        k2 = 0.0;
        tNet = 0.0;
        net1 = 0.0;
        net2 = 0.0;
        holHour1 = 0.0;
        holHour2 = 0.0;
                     
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new PayFrame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JTextField f401K;
    private javax.swing.JTextField f401kD;
    private javax.swing.JCheckBox f7th0;
    private javax.swing.JCheckBox f7th1;
    private javax.swing.JCheckBox f7th10;
    private javax.swing.JCheckBox f7th11;
    private javax.swing.JCheckBox f7th12;
    private javax.swing.JCheckBox f7th13;
    private javax.swing.JCheckBox f7th2;
    private javax.swing.JCheckBox f7th3;
    private javax.swing.JCheckBox f7th4;
    private javax.swing.JCheckBox f7th5;
    private javax.swing.JCheckBox f7th6;
    private javax.swing.JCheckBox f7th7;
    private javax.swing.JCheckBox f7th8;
    private javax.swing.JCheckBox f7th9;
    private javax.swing.JCheckBox fChkUn;
    private javax.swing.JTextField fDay0;
    private javax.swing.JTextField fDay1;
    private javax.swing.JTextField fDay10;
    private javax.swing.JTextField fDay11;
    private javax.swing.JTextField fDay12;
    private javax.swing.JTextField fDay13;
    private javax.swing.JTextField fDay2;
    private javax.swing.JTextField fDay3;
    private javax.swing.JTextField fDay4;
    private javax.swing.JTextField fDay5;
    private javax.swing.JTextField fDay6;
    private javax.swing.JTextField fDay7;
    private javax.swing.JTextField fDay8;
    private javax.swing.JTextField fDay9;
    private javax.swing.JTextField fGross0;
    private javax.swing.JTextField fGross1;
    private javax.swing.JCheckBox fHol0;
    private javax.swing.JCheckBox fHol1;
    private javax.swing.JCheckBox fHol10;
    private javax.swing.JCheckBox fHol11;
    private javax.swing.JCheckBox fHol12;
    private javax.swing.JCheckBox fHol13;
    private javax.swing.JCheckBox fHol2;
    private javax.swing.JCheckBox fHol3;
    private javax.swing.JCheckBox fHol4;
    private javax.swing.JCheckBox fHol5;
    private javax.swing.JCheckBox fHol6;
    private javax.swing.JCheckBox fHol7;
    private javax.swing.JCheckBox fHol8;
    private javax.swing.JCheckBox fHol9;
    private javax.swing.JTextField fHours0;
    private javax.swing.JTextField fHours1;
    private javax.swing.JTextField fIns;
    private javax.swing.JCheckBox fLead0;
    private javax.swing.JCheckBox fLead1;
    private javax.swing.JCheckBox fLead10;
    private javax.swing.JCheckBox fLead11;
    private javax.swing.JCheckBox fLead12;
    private javax.swing.JCheckBox fLead13;
    private javax.swing.JCheckBox fLead2;
    private javax.swing.JCheckBox fLead3;
    private javax.swing.JCheckBox fLead4;
    private javax.swing.JCheckBox fLead5;
    private javax.swing.JCheckBox fLead6;
    private javax.swing.JCheckBox fLead7;
    private javax.swing.JCheckBox fLead8;
    private javax.swing.JCheckBox fLead9;
    private javax.swing.JTextField fNet0;
    private javax.swing.JTextField fNet1;
    private javax.swing.JTextField fOtHours0;
    private javax.swing.JTextField fOtHours1;
    private javax.swing.JTextField fTGross;
    private javax.swing.JTextField fTHours;
    private javax.swing.JTextField fTNet;
    private javax.swing.JTextField fTax;
    private javax.swing.JTextField fTaxD;
    private javax.swing.JTextField fTotalD;
    private javax.swing.JTextField fUnionD;
    private javax.swing.JTextField fWage;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private java.awt.Label label1;
    private javax.swing.JButton ok;
    // End of variables declaration//GEN-END:variables

    public double[] getLeadAmt() {
        return leadAmt;
    }

    public double[] getLeadHrs() {
        return leadHrs;
    }

    public void setLeadHrs(double[] leadHrs) {
        this.leadHrs = leadHrs;
    }

    public boolean isIs7th1() {
        return is7th1;
    }

    public void setIs7th1(boolean is7th1) {
        this.is7th1 = is7th1;
    }

    public boolean isIs7th2() {
        return is7th2;
    }

    public void setIs7th2(boolean is7th2) {
        this.is7th2 = is7th2;
    }
}
